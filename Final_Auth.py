# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19G0B6q0NmLI3cDAIOuWuI7FP37wo_GxI
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

input_filename = '/content/moon.jpeg'
output_filename = 'output_images.png'

# Load the input image
inputImage = cv2.imread(input_filename, 0)

# Get image dimensions, no of pixels
height, width = inputImage.shape[:2]
pixels = height * width

# Print the computed values
print(f"Image Dimensions - Height: {height}, Width: {width}")
print(f"Number of Pixels: {pixels} \n\n")

#Use the computed height and width to create a two-dimensional array with random values Create a random matrix with the same dimensions as the image
random_matrix_1 = np.random.rand(height, width)
random_matrix_2 = np.random.rand(height, width)
print("Image pixel Matrix :\n",random_matrix_1)
print("\nRandom Matrix :\n",random_matrix_2)

# Multiply the two random matrices to create the secretKey
secretKey = random_matrix_1 * random_matrix_2
print("\nSecret Key:")
print(secretKey.shape)
print('\n',secretKey)

print("\n")

fig, axs = plt.subplots(1, 3, figsize=(12, 4))
axs[0].imshow(inputImage, cmap='gray')
axs[0].set_title('Original Image')

# Encrypt the image using the multiplied matrices as the secretKey
fourierTransform = np.fft.fft2(inputImage)
encryptedImage = fourierTransform * secretKey
axs[1].imshow(np.log(1 + np.abs(encryptedImage)), cmap='gray')
axs[1].set_title('Encrypted Image')

# Decrypt the image using the inverse of the secret key
decryptedImage = encryptedImage / np.conj(secretKey)
reconstructedImage = np.fft.ifft2(decryptedImage)
axs[2].imshow(np.abs(reconstructedImage), cmap='gray')
axs[2].set_title('Decrypted Image')

# Display the secret key at the bottom
plt.subplots_adjust(bottom=0.1)
plt.text(0.5, 0.05, f'Secret Key: Multiplied Random Matrices', ha='center', va='center', fontsize=10, color='red', transform=fig.transFigure)

for ax in axs:
    ax.axis('off')

plt.savefig(output_filename)
plt.show()